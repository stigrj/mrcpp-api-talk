name: inverse
layout: true
class: center, middle, inverse

---

#MRCPP
##Application Program Interface

.author[Stig Rune Jensen]

.date[3 August 2016, Stony Brook, NY]

.footnote[Slides available on [GitHub](https://github.com/stigrj/mrcpp-api-talk)]

---

layout: false
.left-column[
## Multi Resolution Analysis
]
.right-column[
```cpp
int n = -2;                     // Box size 2^{-n}
int corner[3] = {-1,-1,-1};     // Translation of first box
int boxes[3]  = { 2, 2, 2};     // Number of boxes
NodeIndex<3> idx(n, corner);
BoundingBox<3> world(idx, boxes);

int k = 7;                      // Polynomial order
InterpolatingBasis basis(k);

MultiResolutionAnalysis<3> MRA(world, basis);
```
Two types of scaling basis
- Legendre polynomials
- Interpolating polynomials

Available orders: `\(1 \leq k \leq 40\)`
]

---

layout: false
.left-column[
## Analytic functions
]
.right-column[
Some important analytic functions are implemented
- Polynomials
- Gaussians
- Slater functions
- Hydrogenic functions

General analytic function through lambdas
```cpp
auto f = [] (const double *r) -> double;
```

Hydrogen nuclear potential
```cpp
double Z = 1.0;             // Hydrogen nuclear charge
auto f = [Z] (const double *r) -> double {
    double R = sqrt(r[0]*r[0] + r[1]*r[1] + r[2]*r[2]);
    return Z/R;
}
```
]

---

layout: false
.left-column[
## FunctionTree
]
.right-column[
The FunctionTree is a rather complicated data structure

Construction involves
- Setting up memory allocator
- Setting up root nodes according to MRA
- Growing a tree structure
- Computing MW coefficients

FunctionTree constructor is __protected__

Construction handled by __TreeBuilder__ objects

Different ways of constructing MW representations
- Projection of analytic function
- Addition of MW functions
- Multiplication of MW functions
- Application of MW operator
]

---

layout: false
.left-column[
## TreeBuilder
]
.right-column[
Tree building algorithm
1. Start with an initial guess for the grid
2. Compute the output function on the current grid
3. Refine the grid where needed
4. Iterate 2 and 3 until the grid is converged

Four available TreeBuilders<sup>.red[*]</sup>
- MWProjector
- MWAdder
- MWMultiplier
- MWOperator

.footnote[.red[*]the __MW__ prefix indicates that MW coefs are computed]
]

---

layout: false
.left-column[
## TreeBuilder
### - MWProjector
]
.right-column[
Projecting a unit charge Gaussian

```cpp
double beta = 10.0;
double alpha = pow(beta/pi, 3.0/2.0);
auto f = [alpha, beta] (const double *r) -> double {
    double R = sqrt(r[0]*r[0] + r[1]*r[1] + r[2]*r[2]);
    return alpha*exp(-beta*R*R);
}

double prec = 1.0e-5;
MWProjector<3> Q(MRA, prec);
FunctionTree<3> *f_tree = Q(f);
```
]

---

layout: false
.left-column[
## TreeBuilder
### - MWProjector
### - MWAdder
]
.right-column[
Adaptive addition of two functions

`$$ f = g - h $$`

```cpp
double prec = 1.0e-5;
MWAdder<3> add(MRA, prec);
FunctionTree<3> *f_tree = add(1.0, *g_tree, -1.0, *h_tree);
```
]

---

layout: false
.left-column[
## TreeBuilder
### - MWProjector
### - MWAdder
### - MWMultiplier
]
.right-column[
Adaptive multiplication of two functions 

`$$ f = g \times h $$`

```cpp
double prec = 1.0e-5;
MWMultiplier<3> mult(MRA, prec);
FunctionTree<3> *f_tree = mult(1.0, *g_tree, *h_tree);
```
]

---

layout: false
.left-column[
## TreeBuilder
### - MWProjector
### - MWAdder
### - MWMultiplier
### - MWOperator
]
.right-column[
Three types of MW operator
- DerivativeOperator
- PoissonOperator
- HelmholtzOperator
]

---

layout: false
.left-column[
## MWOperator
### - Derivative Operator
]
.right-column[
Adaptive application of derivative operator

`$$ f=\frac{\partial g}{\partial y} $$`

```cpp
double a = 0.5;
double b = 0.5;
double prec = 1.0e-5;
DerivativeOperator<3> D(1, MRA, prec, a, b);   
FunctionTree<3> *f_tree = D(*g_tree);
```
]

---

layout: false
.left-column[
## MWOperator
### - Derivative Operator
### - Poisson Operator
]
.right-column[
Adaptive application of Poisson operator

`$$ f(r) =  \int \frac{1}{4\pi\|r-r'\|} g(r') dr' $$`

```cpp
double apply_prec = 1.0e-5;
double build_prec = 1.0e-7;
PoissonOperator P(MRA, apply_prec, build_prec);   
FunctionTree<3> *f_tree = P(*g_tree);

double E = f_tree->dot(*g_tree);
```
]

---

layout: false
.left-column[
## MWOperator
### - Derivative Operator
### - Poisson Operator
### - Helmholtz Operator
]
.right-column[
Adaptive application of Helmholtz operator

`$$ f(r) =  \int \frac{e^{-\mu\|r-r'\|}}{4\pi\|r-r'\|} g(r') dr' $$`

```cpp
double mu = 1.0;
double apply_prec = 1.0e-5;
double build_prec = 1.0e-7;
HelmholtzOperator H(mu, MRA, apply_prec, build_prec);   
FunctionTree<3> *f_tree = H(*g_tree);
```
]

---

layout: false
.left-column[
## Advanced initialization
]
.right-column[
The presented TreeBuilders have a clear and limited interface

Two main drawbacks
- Every operation require construction of new tree
- Building algorithm always starts from root nodes

Two additional TreeBuilders<sup>.red[*]</sup>
- GridGenerator
- GridCleaner

.footnote[.red[*]the __Grid__ prefix indicates that MW coefs are __not__ computed]
]

---

layout: false
.left-column[
## Advanced initialization
### - GridGenerator
]
.right-column[
#### GridGenerator
- Constructs empty FunctionTrees with no MW coefficients

- Used to copy existing grids

- Used to build suitable initial grids
]

---

layout: false
.left-column[
## Advanced initialization
### - GridGenerator
### - GridCleaner
]
.right-column[
#### GridGenerator
- Constructs empty FunctionTrees with no MW coefficients

- Used to copy existing grids

- Used to build suitable initial grids

#### GridCleaner
- Clears MW coefficients from existing FunctionTrees

- Produces reusable grids

- Can refine grid one level before clearing

- Useful for iterative algorithms
]

---

layout: false
.left-column[
## Advanced initialization
### - GridGenerator
### - GridCleaner
### - Examples
]
.right-column[
TreeBuilders have two ways to operate

- Construct new tree and start from root
```cpp
TreeBuilder<D> B(MRA);
FunctionTree<D> *out = B(inp);
```

- Start from existing empty tree
```cpp
TreeBuilder<D> B(MRA);
B(*out, inp);
```
]

---

layout: false
.left-column[
## Advanced initialization
### - GridGenerator
### - GridCleaner
### - Examples
]
.right-column[
Default constructor
```cpp
GridGenerator<D> G(MRA);
FunctionTree<D> *f_tree = G();
```

Copy existing grid
```cpp
GridGenerator<D> G(MRA);
FunctionTree<D> *f_tree = G(*g_tree);
```

Estimate grid based on analytic requirements
```cpp
GridGenerator<D> G(MRA);
FunctionTree<D> *f_tree = G(f_func);
```
]

---

layout: false
.left-column[
## Advanced initialization
### - GridGenerator
### - GridCleaner
### - Examples
]
.right-column[
Projecting on existing grid __without__ refinement
```cpp
MWProjector<D> Q(MRA);        // No (or negative) precision
Q(*f_tree, f);                // Fixed projection
```

Projecting on existing grid __with__ refinement
```cpp
double prec = 1.0e-5;
MWProjector<D> Q(MRA, prec);  // Positive precision
Q(*f_tree, f);                // Adaptive projection
```

Projecting on existing grid with __limited__ refinement
```cpp
int max_iter = 2;
double prec = 1.0e-5;
MWProjector<D> Q(MRA, prec);  // Positive precision
Q(*f_tree, f, max_iter);      // Limited adaptive projection
```
]

---

layout: false
.left-column[
## Advanced initialization
### - GridGenerator
### - GridCleaner
### - Examples
]
.right-column[
Derivatives are usually computed on a fixed grid

```cpp
GridGenerator<3> G(MRA);
DerivativeOperator<3> D(1, MRA); // No precision

FunctionTree<3> *f_tree = G();   // Initialize empty grid
G(*f_tree, *g_tree);             // Copy grid from g
D(*f_tree, *g_tree);             // Compute on fixed grid
```
]

---

layout: false
.left-column[
## Advanced initialization
### - GridGenerator
### - GridCleaner
### - Examples
]
.right-column[
Addition of two functions is usually done on their union grid

```cpp
GridGenerator<D> G(MRA);
MWAdder<D> add(MRA);

FunctionTree<D> *f_tree = G();      // Construct empty grid
G(*f_tree, *g_tree);                // Copy grid of g
G(*f_tree, *h_tree);                // Copy grid of h
add(*f_tree, 1.0, *g_tree, -1.0, *h_tree);  // Fixed grid
```
]

---

layout: false
.left-column[
## Advanced initialization
### - GridGenerator
### - GridCleaner
### - Examples
]
.right-column[
A cumbersome adaptive projection algorithm

```cpp
double prec = 1.0e-5;
GridCleaner<D> C(MRA, prec);    // Precision is passed to the
MWProjector<D> Q(MRA);          // cleaner, not the projector

int n_nodes = 1;
while (n_nodes > 0) {
    Q(*f_tree, f);              // Project f on given grid
    n_nodes = C(*f_tree);       // Refine and clear
}
Q(*f_tree, f);                  // Project f on final grid
```
]

---

name: last-page
template: inverse

Slideshow created using [remark] and served using [cicero]

[remark]: https://github.com/gnab/remark
[cicero]: https://github.com/bast/cicero
