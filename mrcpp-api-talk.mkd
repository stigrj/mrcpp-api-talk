name: inverse
layout: true
class: center, middle, inverse

---

#MRCPP
##Application Program Interface

.author[Stig Rune Jensen]

.date[3 August 2016, Stony Brook, NY]

.footnote[Slides available on [GitHub](https://github.com/stigrj/mrcpp-api-talk)]

---

layout: false
.left-column[
## Introduction
]
.right-column[
### Some intro
]

---

layout: false
.left-column[
## Analytic functions
]
.right-column[
- Some important analytic functions are implemented
  * Polynomials
  * Gaussians
  * Slater functions
  * Hydrogen solutions

- General analytic function through lambdas
```cpp
    auto f = [] (const double *r) -> double;
```
]
.left-column[
## Example
]
.right-column[
- Hydrogen nuclear potential

```cpp
    double Z = 1.0;             // Hydrogen nuclear charge
    auto f = [Z] (const double *r) -> double {
        double R = sqrt(r[0]*r[0] + r[1]*r[1] + r[2]*r[2]);
        return Z/R;
    }
```
]

---

layout: false
.left-column[
## MultiResolutionAnalysis
]
.right-column[
```cpp
    int n;                      // Box size 2^{-n}
    int l[D];                   // Translation of first box
    int nb[D];                  // Number of boxes
    NodeIndex<D> idx(n, l);
    BoundingBox<D> world(idx, nb);
```
]

???

.left-column[
## MultiResolutionAnalysis
]
.right-column[
### Computational domain
```cpp
    int n;                              // Root scale defines box size 2^{-n}
    int l[D];                           // Translation of first box
    int nb[D];                          // Number of boxes
    NodeIndex<D> idx(n, l);             // Index defining the first box
    BoundingBox<D> world(idx, nb);
```
### Scaling basis
 * Legendre polynomials
 * Interpolating polynomials
 * Available orders[+]: `\(1 \leq k \leq 40\)`
```cpp
    int k;                              // Polynomial order
    InterpolatingBasis basis(k);        // Legendre or Interpolating basis
```

[+] Some operators require intermediates of order `\(2k\)`, so in that case the
maximum order is `\(k=20\)`
]

???

.left-column[
## MultiResolutionAnalysis
]
.right-column[
### Computational domain
```cpp
    int n;                              // Root scale defines box size 2^{-n}
    int l[D];                           // Translation of first box
    int nb[D];                          // Number of boxes
    NodeIndex<D> idx(n, l);             // Index defining the first box
    BoundingBox<D> world(idx, nb);
```
### Scaling basis
 * Legendre
 * Interpolating
 * Available orders[+]: `\(1 \leq k \leq 40\)`
```cpp
    int k;                              // Polynomial order
    InterpolatingBasis basis(k);        // Legendre or Interpolating basis
```

### Multi-resolution analysis
```cpp
    MultiResolutionAnalysis<D> MRA(world, basis);
```

[+] Some operators require intermediates of order `\(2k\)`, so in that case the
maximum order is `\(k=20\)`
]

---

layout: false
.left-column[
## Function representations
]
.right-column[

### Ways of constructing MW representations
* Projection of analytic function
* Arithmetic operations
* Application of MW operator
]

---

## Acknowldegements

- Luca Frediani

- Tor Fl√•

- Radovan Bast

- Jonas Juselius

---

name: last-page
template: inverse

## Thanks for your attention!

Slideshow created using [remark] and served using [cicero]

[remark]: https://github.com/gnab/remark
[cicero]: https://github.com/bast/cicero
